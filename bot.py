from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from twilio.rest import Client
from keep_alive import keep_alive
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import random
import time
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime
from datetime import timedelta
import time
import logging
import asyncio

logging.basicConfig(level=logging.INFO)

# Admin system
ADMIN_IDS = [6165060012]
user_permissions = {6165060012: float("inf")}
user_used_free_plan = set()

# Twilio session
user_clients = {}
user_available_numbers = {}
user_purchased_numbers = {}

# Permission check decorator
def permission_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        expire_time = user_permissions.get(user_id, 0)
        if time.time() > expire_time:
            keyboard = [
                [InlineKeyboardButton("1 Hour - $FREE", callback_data="PLAN:1h")],
                [InlineKeyboardButton("1 Day - $2", callback_data="PLAN:1d")],
                [InlineKeyboardButton("7 Day - $10", callback_data="PLAN:7d")],
                [InlineKeyboardButton("15 Day - $15", callback_data="PLAN:15d")],
                [InlineKeyboardButton("30 Day - $20", callback_data="PLAN:30d")],
            ]
            await (update.message or update.callback_query).reply_text(
                "Bot —Ä–∂–ü—Ä–∂‚ñë Subscription —Ä–∂–•—Ä–∂‚îê—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–¨—Ä–∂–∏—Ä–∑–ù—Ä–∂–ø —Ä–∂–∏—Ä–∂‚îê—Ä–∂–™—Ä–∑–ó—Ä–∂‚ñë —Ä–∂–º—Ä–∂‚ïõ—Ä–∂–Ø—Ä–∂–∏—Ä–∑–ó —Ä–∂–•—Ä–∑–ù—Ä–∂‚ñì—Ä–∂‚îê—Ä–∂–• —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        return await func(update, context)
    return wrapper

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "—Ä–∂‚ïï—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂–ß—Ä–∂–¥—Ä–∂–æ Evan Bot-—Ä–∂–ü –Å–Ø–ú‚ïï —Ä–∂–•—Ä–∂‚ïõ—Ä–∂–¨ —Ä–∂–•—Ä–∂‚ñë—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–¨—Ä–∂–∏—Ä–∑–ù—Ä–∂–ø —Ä–∂–∏—Ä–∂‚îê—Ä–∂–™—Ä–∑–ó—Ä–∂‚ñë —Ä–∂–•—Ä–∂–æ—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–ß—Ä–∑–ë—Ä–∂‚ñì—Ä–∑–õ —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∂–¥—Ä–∑–ó —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∑–ó—Ä–∂–∏!\n\n"
        "/login <SID> <TOKEN>\n"
        "/buy_number <Area Code>\n"
        "/show_messages\n"
        "/delete_number\n"
        "/my_numbers\n"
        "SUPPORT : @EVANHELPING_BOT"
    )

# Admin permission grant
async def grant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚îê —Ä–∂–ü—Ä–∂–ó —Ä–∂–•—Ä–∂–æ—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∂–¥—Ä–∑–ó —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–º—Ä–∑–ó—Ä–∂–∏ —Ä–∂–∏—Ä–∂‚ïõ—Ä–µ–¥")
        return
    if len(context.args) != 2:
        await update.message.reply_text("—Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë: /grant <user_id> <duration> (—Ä–∂–ø—Ä–∑–ó—Ä–∂–æ—Ä–∂–∏ 3d)")
        return
    try:
        target_id = int(context.args[0])
        duration = context.args[1].lower()
        if duration.endswith("mo"):
            seconds = int(duration[:-2]) * 2592000
        else:
            unit_map = {"m": 60, "h": 3600, "d": 86400, "w": 604800}
            unit = duration[-1]
            amount = int(duration[:-1])
            seconds = amount * unit_map[unit]
        user_permissions[target_id] = time.time() + seconds
        await update.message.reply_text(f"—Ç–¨–ï {target_id} —Ä–∂–•—Ä–∑–ó {duration} —Ä–∂‚ïï—Ä–∂–æ—Ä–∑–Ø—Ä–∑–ó—Ä–∂‚ñë —Ä–∂–¨—Ä–∂–∏—Ä–∑–ù—Ä–∂–ø —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–æ—Ä–∂‚îê—Ä–∂‚ï¢—Ä–∂–∏ —Ä–∂–∂—Ä–∑–ó—Ä–∂–£—Ä–∑–Ø—Ä–∂‚ïõ —Ä–∂‚ï£—Ä–∑–Ø—Ä–∑–ó—Ä–∂–´—Ä–∑–ó—Ä–µ–¥")
    except:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂–Ω—Ä–∑–ë—Ä–∂‚ñì —Ä–∂–ª—Ä–∂‚ñë—Ä–∂–æ—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ïõ—Ä–∂–Ø—Ä–µ–¥ —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–∏ m, h, d, w, mo")

# Active user list
async def active_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚îê —Ä–∂–ü—Ä–∂–ó —Ä–∂–•—Ä–∂–æ—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∂–¥—Ä–∑–ó —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–º—Ä–∑–ó—Ä–∂–∏ —Ä–∂–∏—Ä–∂‚ïõ—Ä–µ–¥")
        return
    now = time.time()
    active = {uid: exp for uid, exp in user_permissions.items() if exp > now or exp == float("inf")}
    if not active:
        await update.message.reply_text("—Ä–∂–•—Ä–∑–õ—Ä–∂–∏—Ä–∑–õ Active Permission —Ä–∂–ó—Ä–∂–ô—Ä–∂–¨—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–∏—Ä–∑–ó—Ä–∂–ó—Ä–µ–¥")
        return

    msg = "—Ç–¨–ï Active Permission —Ä–∂–ó—Ä–∂–ô—Ä–∂–¨—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂‚ñì—Ä–∂‚îê—Ä–∂‚ïï—Ä–∑–ù—Ä–∂–Ø —Ç–¨–ï\n\n"
    for uid, exp in active.items():
        try:
            user = await context.bot.get_chat(uid)
            name = user.full_name
            username = f"@{user.username}" if user.username else "N/A"
        except:
            name = "Unknown"
            username = "N/A"

        duration = "Unlimited" if exp == float("inf") else str(timedelta(seconds=int(exp - now)))
        msg += (
            f"–Å–Ø–°–¥ Name: {name}\n"
            f"–Å–Ø–ñ–§ ID: {uid}\n"
            f"–Å–Ø–§–ß Username: {username}\n"
            f"—Ç–ü‚îÇ Time Left: {duration}\n\n"
        )
    await update.message.reply_text(msg)

# Canadian area codes list (example, you can add more)
canadian_area_codes = [
    '416', '647', '905', '613', '519', '438', '514', '403', '204', '306',
    '705', '902', '778', '587', '250', '604', '819', '807', '905', '819', '905'
]

# This function will send the daily message with 3 random area codes
async def send_daily_message(context):
    user_ids = [6165060012]  # List of user IDs to send the message (could be dynamic based on active users)
    random_area_codes = random.sample(canadian_area_codes, 3)  # Select 3 random area codes

    message = f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶≠ ‡¶π‡ßã‡¶ï üå∏\n‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ Working Area ‡¶ï‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá: {', '.join(random_area_codes)}"
    
    for user_id in user_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            print(f"Error sending message to {user_id}: {e}")

# Schedule the daily message at 2 AM
def schedule_daily_message(app):
    scheduler = AsyncIOScheduler(timezone="Asia/Dhaka")
    scheduler.add_job(send_daily_message, 'cron', hour=2, minute=0, args=[app])
    scheduler.start()



# Twilio login
@permission_required
async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 2:
        await update.message.reply_text("—Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë: /login <SID> <AUTH_TOKEN>")
        return
    sid, token = context.args
    try:
        client = Client(sid, token)
        client.api.accounts(sid).fetch()
        user_clients[update.effective_user.id] = client
        await update.message.reply_text("—Ç–¨–ï —Ä–∂‚ñì—Ä–∂–ß—Ä–∂–ó—Ä–∂–∏ —Ä–∂‚ïï—Ä–∂–ª—Ä–∂‚ñì!")
    except Exception as e:
        logging.exception("Login error:")
        await update.message.reply_text(f"—Ä–∂‚ñì—Ä–∂–ß—Ä–∂–ó—Ä–∂–∏ —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ñë—Ä–∑–ù—Ä–∂–µ: {e}")

# Buy number
@permission_required
async def buy_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    client = user_clients.get(user_id)

    if not client:
        await update.message.reply_text("—Ç–™–∞—è‚ïï–ü —Ä–∂–ñ—Ä–∂–ß—Ä–∑–ó /login —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–∏—Ä–µ–¥")
        return

    try:
        if context.args:
            # —Ä–∂–ó—Ä–∂–ô—Ä–∂–¨—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–ø—Ä–∂–∂—Ä–∂‚îê Area Code —Ä–∂–∂—Ä–∑–ó—Ä–∑–Ø
            area_code = context.args[0]
            numbers = client.available_phone_numbers("CA").local.list(area_code=area_code, limit=10)
        else:
            # —Ä–∂–ó—Ä–∂–ô—Ä–∂–¨—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–ø—Ä–∂–∂—Ä–∂‚îê —Ä–∂–•—Ä–∂‚îê—Ä–∂–´—Ä–∑–ë —Ä–∂–∏—Ä–∂‚ïõ —Ä–∂–∂—Ä–∑–ó—Ä–∑–Ø, —Ä–∂–¥—Ä–∂‚ïõ—Ä–∂‚ï£—Ä–∂‚ñì—Ä–∑–ó —Ä–∂‚ñë—Ç–ê–ù—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–±—Ä–∂–æ —Ä–∂–•—Ä–∂‚îê—Ä–∂–´—Ä–∑–ë CA —Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë
            numbers = client.available_phone_numbers("CA").local.list(limit=10)

        if not numbers:
            await update.message.reply_text("—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂–£—Ä–∑–Ø—Ä–∂‚ïõ —Ä–∂–ø—Ä–∂‚ïõ—Ä–∑–Ø—Ä–∂–∏—Ä–∂‚îê—Ä–µ–¥")
            return

        user_available_numbers[user_id] = [n.phone_number for n in numbers]
        keyboard = [[InlineKeyboardButton(n.phone_number, callback_data=f"BUY:{n.phone_number}")] for n in numbers]
        keyboard.append([InlineKeyboardButton("Cancel —Ç–≠–ú", callback_data="CANCEL")])

        await update.message.reply_text(
            "—Ä–∂–∏—Ä–∂‚îê—Ä–∂–™—Ä–∑–ó—Ä–∂‚ñë —Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–ß—Ä–∑–ë—Ä–∂‚ñì—Ä–∑–õ —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂–£—Ä–∑–Ø—Ä–∂‚ïõ —Ä–∂–ß—Ä–∑–ó—Ä–∂–´—Ä–∑–ó:\n\n" + "\n".join(user_available_numbers[user_id]),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logging.exception("Buy number error:")
        await update.message.reply_text(f"—Ä–∂‚ïï—Ä–∂–æ—Ä–∂‚ïï—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ïõ: {e}")

# Show messages
@permission_required
async def show_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    client = user_clients.get(update.effective_user.id)
    if not client:
        await update.message.reply_text("—Ç–™–∞—è‚ïï–ü —Ä–∂–ñ—Ä–∂–ß—Ä–∑–ó /login —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–∏—Ä–µ–¥")
        return
    try:
        msgs = client.messages.list(limit=20)
        incoming = [msg for msg in msgs if msg.direction == "inbound"]
        if not incoming:
            await update.message.reply_text("—Ä–∂–•—Ä–∑–õ—Ä–∂–∏—Ä–∑–õ Incoming Message —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂–£—Ä–∑–Ø—Ä–∂‚ïõ —Ä–∂–ø—Ä–∂‚ïõ—Ä–∑–Ø—Ä–∂–∏—Ä–∂‚îê—Ä–µ–¥")
            return
        output = "\n\n".join([f"From: {m.from_}\nTo: {m.to}\nBody: {m.body}" for m in incoming[:5]])
        await update.message.reply_text(output)
    except Exception as e:
        logging.exception("Show messages error:")
        await update.message.reply_text(f"—Ä–∂‚ïï—Ä–∂–æ—Ä–∂‚ïï—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ïõ: {e}")

# Delete number
@permission_required
async def delete_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    client = user_clients.get(update.effective_user.id)
    if not client:
        await update.message.reply_text("—Ç–™–∞—è‚ïï–ü —Ä–∂–ñ—Ä–∂–ß—Ä–∑–ó /login —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–∏—Ä–µ–¥")
        return
    try:
        numbers = client.incoming_phone_numbers.list(limit=1)
        if not numbers:
            await update.message.reply_text("—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–¶—Ä–∑–ë—Ä–∂–ë—Ä–∂–¨—Ä–∑–ó —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂–£—Ä–∑–Ø—Ä–∂‚ïõ —Ä–∂–ø—Ä–∂‚ïõ—Ä–∑–Ø—Ä–∂–∏—Ä–∂‚îê—Ä–µ–¥")
            return
        numbers[0].delete()
        await update.message.reply_text("—Ç–¨–ï —Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–±—Ä–∂‚îê—Ä–∂‚ñì—Ä–∂‚îê—Ä–∂–Ø —Ä–∂‚ï£—Ä–∑–Ø—Ä–∑–ó—Ä–∂–´—Ä–∑–ó—Ä–µ–¥")
    except Exception as e:
        logging.exception("Delete number error:")
        await update.message.reply_text(f"—Ä–∂–±—Ä–∂‚îê—Ä–∂‚ñì—Ä–∂‚îê—Ä–∂–Ø —Ä–∂–•—Ä–∂‚ñë—Ä–∂–¥—Ä–∑–ó —Ä–∂‚ïï—Ä–∂–æ—Ä–∂‚ïï—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ïõ: {e}")

# My numbers
@permission_required
async def my_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    client = user_clients.get(update.effective_user.id)
    if not client:
        await update.message.reply_text("—Ç–™–∞—è‚ïï–ü —Ä–∂–ñ—Ä–∂–ß—Ä–∑–ó /login —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–∏—Ä–µ–¥")
        return
    try:
        numbers = client.incoming_phone_numbers.list()
        if not numbers:
            await update.message.reply_text("—Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∑–õ—Ä–∂–∏—Ä–∑–õ —Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–∏—Ä–∑–ó—Ä–∂–ó—Ä–µ–¥")
            return
        keyboard = [[InlineKeyboardButton(n.phone_number, callback_data=f"DELETE:{n.phone_number}")] for n in numbers]
        await update.message.reply_text("—Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–ß—Ä–∑–ë—Ä–∂‚ñì—Ä–∑–õ:", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logging.exception("My numbers error:")
        await update.message.reply_text(f"—Ä–∂‚ïï—Ä–∂–æ—Ä–∂‚ïï—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ïõ: {e}")

# Admin Management
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚îê —Ä–∂–ü—Ä–∂–ó —Ä–∂–•—Ä–∂–æ—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∂–¥—Ä–∑–ó —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–º—Ä–∑–ó—Ä–∂–∏ —Ä–∂–∏—Ä–∂‚ïõ—Ä–µ–¥")
        return
    try:
        new_admin = int(context.args[0])
        if new_admin not in ADMIN_IDS:
            ADMIN_IDS.append(new_admin)
            user_permissions[new_admin] = float("inf")
            await update.message.reply_text(f"—Ç–¨–ï {new_admin} —Ä–∂–ü—Ä–∂–¶—Ä–∂–∏ Admin!")
        else:
            await update.message.reply_text("—Ä–∂–ó—Ä–∂–ô—Ä–∂–¨—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–ó—Ä–∂–¥—Ä–∂‚îê—Ä–∂–æ—Ä–∂–∑—Ä–∑–ù—Ä–∂–ø—Ä–∑–ó—Ä–∂–ó Admin—Ä–µ–¥")
    except:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂‚ïï—Ä–∂–∞—Ä–∂‚îê—Ä–∂–•—Ä–∂–Ω—Ä–∂‚ïõ—Ä–∂–º—Ä–∑–ó user_id —Ä–∂–∂—Ä–∂‚îê—Ä–∂–∏—Ä–µ–¥")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS or len(ADMIN_IDS) <= 1:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂–ü—Ä–∂–ó —Ä–∂–•—Ä–∂–æ—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–¨—Ä–∂–∏—Ä–∑–ù—Ä–∂–ø —Ä–∂–∏—Ä–∂‚ïõ—Ä–µ–¥")
        return
    try:
        target_id = int(context.args[0])
        if target_id in ADMIN_IDS and target_id != user_id:
            ADMIN_IDS.remove(target_id)
            user_permissions.pop(target_id, None)
            await update.message.reply_text(f"—Ç–¨–ï {target_id} —Ä–∂–•—Ä–∑–ó Admin —Ä–∂–µ—Ä–∑–ó—Ä–∂–•—Ä–∑–ó —Ä–∂‚ïï—Ä–∂‚ñë—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–õ —Ä–∂‚ï£—Ä–∑–Ø—Ä–∑–ó—Ä–∂–´—Ä–∑–ó—Ä–µ–¥")
        else:
            await update.message.reply_text("—Ç–≠–ú —Ä–∂–Ω—Ä–∑–ë—Ä–∂‚ñì —Ä–∂–ñ—Ä–∂–ó—Ä–∂–±—Ä–∂‚îê—Ä–µ–¥")
    except:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂‚ïï—Ä–∂–∞—Ä–∂‚îê—Ä–∂–•—Ä–∂–Ω—Ä–∂‚ïõ—Ä–∂–º—Ä–∑–ó user_id —Ä–∂–∂—Ä–∂‚îê—Ä–∂–∏—Ä–µ–¥")

async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚îê —Ä–∂–ü—Ä–∂–ó —Ä–∂–•—Ä–∂–æ—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∂–¥—Ä–∑–ó —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–º—Ä–∑–ó—Ä–∂–∏ —Ä–∂–∏—Ä–∂‚ïõ—Ä–µ–¥")
        return
    msg = "–Å–Ø–´–±—è‚ïï–ü Admin List:\n\n"
    for aid in ADMIN_IDS:
        try:
            user = await context.bot.get_chat(aid)
            msg += f"{user.full_name} —Ç–ê–§ @{user.username or 'N/A'} (ID: {aid})\n"
        except:
            msg += f"Unknown (ID: {aid})\n"
    await update.message.reply_text(msg)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("—Ç–≠–ú —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚îê —Ä–∂–ü—Ä–∂–ó —Ä–∂–•—Ä–∂–æ—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∂–¥—Ä–∑–ó —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–º—Ä–∑–ó—Ä–∂–∏ —Ä–∂–∏—Ä–∂‚ïõ—Ä–µ–¥")
        return
    msg = " ".join(context.args)
    success = fail = 0
    for uid in user_permissions:
        try:
            await context.bot.send_message(chat_id=uid, text=msg)
            success += 1
        except:
            fail += 1
    await update.message.reply_text(f"—Ç–¨–ï —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂–∞—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–õ —Ä–∂‚ï£—Ä–∑–Ø—Ä–∑–ó—Ä–∂–´—Ä–∑–ó: {success}, —Ç–≠–ú —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ñë—Ä–∑–ù—Ä–∂–µ: {fail}")

# Button callback
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("BUY:"):
    number = data.split("BUY:")[1]
    client = user_clients.get(user_id)
    if not client:
        await query.edit_message_text("—Ç–™–∞—è‚ïï–ü —Ä–∂–ñ—Ä–∂–ß—Ä–∑–ó /login —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–∏—Ä–µ–¥")
        return
    try:
        existing = client.incoming_phone_numbers.list(limit=1)
        if existing:
            warn_msg = await query.edit_message_text("—Ç–™–∞—è‚ïï–ü —Ä–∂–∂—Ä–∑–Ø—Ä–∂‚ïõ —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ó —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–ñ—Ä–∂–ß—Ä–∑–ó—Ä–∂‚ñë —Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–Ø—Ä–∂‚îê /delete_number —Ä–∂–•—Ä–∂–æ—Ä–∂‚ïõ—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ó —Ä–∂–±—Ä–∂‚îê—Ä–∂‚ñì—Ä–∑–ó—Ä–∂–Ø —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–∏")
            # 10 —Ä–∂‚ïï—Ä–∑–ó—Ä–∂–•—Ä–∑–ó—Ä–∂–∏—Ä–∑–ù—Ä–∂–± —Ä–∂–∫—Ä–∂‚ñë —Ä–∂–±—Ä–∂‚îê—Ä–∂‚ñì—Ä–∂‚îê—Ä–∂–Ø —Ä–∂–•—Ä–∂‚ñë—Ä–∂‚ïõ —Ä–∂‚ï£—Ä–∂–º—Ä–∑–ó
            await asyncio.sleep(10)
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=warn_msg.message_id)
            except:
                pass  # —Ä–∂–ø—Ä–∂–∂—Ä–∂‚îê —Ä–∂–ü—Ä–∂‚ñë—Ä–∂–æ—Ä–∂–∑—Ä–∑–ù—Ä–∂–ø—Ä–∑–ó —Ä–∂–ó—Ä–∂–ô—Ä–∂–¨—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–±—Ä–∂‚îê—Ä–∂‚ñì—Ä–∂‚îê—Ä–∂–Ø —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ó —Ä–∂–ª—Ä–∑–ó—Ä–∂‚ñì—Ä–∑–ó
            return

        purchased = client.incoming_phone_numbers.create(phone_number=number)
        await query.edit_message_text(f"—Ç–¨–ï —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚îê —Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë—Ä–∂–Ø—Ä–∂‚îê —Ä–∂–•—Ä–∂‚îê—Ä–∂–∏—Ä–∑–ó—Ä–∂–´—Ä–∑–ó—Ä–∂–∏: {purchased.phone_number}")
    except Exception as e:
        await query.edit_message_text(f"—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∑–ó—Ä–∂–∏—Ä–∂‚ïõ —Ä–∂–ø—Ä–∂‚ïõ—Ä–∑–Ø—Ä–∂–∏—Ä–∂‚îê: {e}")


    elif data.startswith("DELETE:"):
        number = data.split("DELETE:")[1]
        client = user_clients.get(user_id)
        try:
            nums = client.incoming_phone_numbers.list(phone_number=number)
            if nums:
                nums[0].delete()
                await query.edit_message_text(f"—Ç–¨–ï —Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë {number} —Ä–∂–±—Ä–∂‚îê—Ä–∂‚ñì—Ä–∂‚îê—Ä–∂–Ø —Ä–∂‚ï£—Ä–∑–Ø—Ä–∑–ó—Ä–∂–´—Ä–∑–ó—Ä–µ–¥")
            else:
                await query.edit_message_text("—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂–£—Ä–∑–Ø—Ä–∂‚ïõ —Ä–∂–ø—Ä–∂‚ïõ—Ä–∑–Ø—Ä–∂–∏—Ä–∂‚îê—Ä–µ–¥")
        except Exception as e:
            await query.edit_message_text(f"—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–±—Ä–∂‚îê—Ä–∂‚ñì—Ä–∂‚îê—Ä–∂–Ø —Ä–∂–•—Ä–∂‚ñë—Ä–∂–¥—Ä–∑–ó —Ä–∂‚ïï—Ä–∂–æ—Ä–∂‚ïï—Ä–∑–ù—Ä–∂–ø—Ä–∂‚ïõ: {e}")

    elif data == "CANCEL":
        await query.edit_message_text("—Ä–∂–∏—Ä–∂‚ïõ—Ä–∂–æ—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–∏—Ä–∂‚îê—Ä–∂‚ñë—Ä–∑–ù—Ä–∂–º—Ä–∂‚ïõ—Ä–∂–™—Ä–∂–∏ —Ä–∂–º—Ä–∂‚ïõ—Ä–∂–¥—Ä–∂‚îê—Ä–∂‚ñì —Ä–∂–•—Ä–∂‚ñë—Ä–∂‚ïõ —Ä–∂‚ï£—Ä–∑–Ø—Ä–∑–ó—Ä–∂–´—Ä–∑–ó—Ä–µ–¥")

    elif data.startswith("PLAN:"):
        plan = data.split(":")[1]
        username = f"@{query.from_user.username}" if query.from_user.username else "N/A"
        prices = {
            "1h": (3600, "1 Hour", "$FREE"),
            "1d": (86400, "1 Day", "$2"),
            "7d": (604800, "7 Day", "$10"),
            "15d": (1296000, "15 Day", "$15"),
            "30d": (2592000, "30 Day", "$20")
        }
        if plan == "1h":
            if user_id in user_used_free_plan:
                await query.edit_message_text("—Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚îê —Ä–∂–ó—Ä–∂–¥—Ä–∂‚îê—Ä–∂–æ—Ä–∂–∑—Ä–∑–ù—Ä–∂–ø—Ä–∑–ó—Ä–∂–ó —Ä–∂–ª—Ä–∑–ù—Ä–∂‚ñë—Ä–∂‚îê —Ä–∂–∫—Ä–∑–ù—Ä–∂‚ñì—Ä–∂‚ïõ—Ä–∂–∏ —Ä–∂–º—Ä–∑–ù—Ä–∂–ø—Ä–∂–º—Ä–∂‚ï£—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ó—Ä–∂–´—Ä–∑–ó—Ä–∂–∏—Ä–µ–¥")
                return
            user_used_free_plan.add(user_id)
            user_permissions[user_id] = time.time() + 3600
            await query.edit_message_text("—Ç–¨–ï —Ä–∂–ñ—Ä–∂–∫—Ä–∂–∏—Ä–∂‚îê —Ä–∑–∑ —Ä–∂–®—Ä–∂–∏—Ä–∑–ù—Ä–∂–Ø—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–¨—Ä–∂–∏—Ä–∑–ù—Ä–∂–ø —Ä–∂–ª—Ä–∑–ù—Ä–∂‚ñë—Ä–∂‚îê —Ä–∂–∫—Ä–∑–ù—Ä–∂‚ñì—Ä–∂‚ïõ—Ä–∂–∏ —Ä–∂–ü—Ä–∂–•—Ä–∂–Ø—Ä–∂‚îê—Ä–∂–Ω —Ä–∂–•—Ä–∂‚ñë—Ä–∑–ó—Ä–∂–´—Ä–∑–ó—Ä–∂–∏—Ä–µ–¥")
            return
        if plan in prices:
            _, label, cost = prices[plan]
            msg = (
                f"Please send {cost} to Binance Pay ID: 469628989\n"
                f"—Ä–∂–∫—Ä–∑–ó—Ä–∂–æ—Ä–∑–ó—Ä–∂–∏—Ä–∑–ù—Ä–∂–Ø —Ä–∂–•—Ä–∂‚ñë—Ä–∂‚ïõ—Ä–∂‚ñë —Ä–∂–∫—Ä–∂‚ñë —Ä–∂–∫—Ä–∑–ù—Ä–∂‚ñë—Ä–∑–ë—Ä–∂–Ω —Ä–∂–∫—Ä–∂‚ïõ—Ä–∂–∞—Ä–∂‚ïõ—Ä–∂–∏ Admin —Ä–∂–•—Ä–∑–ó\n\n"
                f"User ID: {user_id}\nUsername: {username}\nPlan: {label} - {cost}"
            )
            await query.edit_message_text(msg)

# Start bot
def main():
    keep_alive()
    TOKEN = "7253583924:AAENVbdYNjHdbKHV0SJhnhoomyeOM2YeLXc"
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("grant", grant))
    app.add_handler(CommandHandler("active_users", active_users))
    app.add_handler(CommandHandler("login", login))
    app.add_handler(CommandHandler("buy_number", buy_number))
    app.add_handler(CommandHandler("show_messages", show_messages))
    app.add_handler(CommandHandler("delete_number", delete_number))
    app.add_handler(CommandHandler("my_numbers", my_numbers))
    app.add_handler(CommandHandler("add_admin", add_admin))
    app.add_handler(CommandHandler("remove_admin", remove_admin))
    app.add_handler(CommandHandler("list_admins", list_admins))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
